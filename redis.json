{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "ElastiCache cluster",
  "Outputs": {
    "RedisCluster": {
      "Description": "RedisCluster created",
      "Value": {
        "Ref": "ElasticacheCluster"
      }
    },
    "RedisEndpoint": {
      "Description": "Redis Endpoint",
      "Value": { "Fn::GetAtt" : ["GetECEndpointCustomeResource", "Endpoint"] }
    }
  },
  "Parameters": {
    "VpcId": {
      "Type": "String"
    },
    "ElasticacheSecurityGroup": {
      "Type": "String"
    },
    "PublicSubnet1": {
      "Type": "String"
    },
    "PublicSubnet2": {
      "Type": "String"
    },
    "Availabilityzone": {
      "Type": "String"
    },
    "RedisInstanceType" : {
      "Description" : "Redis instance type",
      "Type" : "String",
      "Default" : "cache.t2.small",
      "ConstraintDescription" : "must be a valid Redis instance type."
    }
  },
  "Resources": {
    "SubnetGroup": {
      "Type": "AWS::ElastiCache::SubnetGroup",
      "Properties": {
        "Description": "Cache Subnet Group",
        "SubnetIds": [
          {
            "Ref": "PublicSubnet1"
          },
          {
            "Ref": "PublicSubnet2"
          }
        ]
      }
    },
    "ElasticacheCluster": {
      "Type": "AWS::ElastiCache::CacheCluster",
      "Properties": {
        "CacheSubnetGroupName": {
          "Ref": "SubnetGroup"
        },
        "CacheNodeType": {  "Ref": "RedisInstanceType"  },
        "Engine": "redis",
        "NumCacheNodes": "1",
        "PreferredAvailabilityZone": {
          "Ref": "Availabilityzone"
        },
        "AutoMinorVersionUpgrade": "true",
        "VpcSecurityGroupIds": [
          {
            "Ref": "ElasticacheSecurityGroup"
          }
        ]
      }
    },
    "GetECEndpointLambdaExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "root",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Action": [
                    "elasticache:DescribeCacheClusters",
                    "logs:*"
                  ],
                  "Resource": "*",
                  "Effect": "Allow"
                }
              ]
            }
          }
        ],
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              }
            }
          ]
        }
      }
    },
    "GetECEndpointLambdaExecutionProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "GetECEndpointLambdaExecutionRole"
          }
        ]
      }
    },
    "GetECEndpointLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "ZipFile": {
            "Fn::Join": [
              "\n",
              [
                "import botocore.session",
                "import json",
                "",
                "try:",
                "    from urllib2 import HTTPError, build_opener, HTTPHandler, Request",
                "except ImportError:",
                "    from urllib.error import HTTPError",
                "    from urllib.request import build_opener, HTTPHandler, Request",
                "",
                "SUCCESS = 'SUCCESS'",
                "FAILED = 'FAILED'",
                "",
                "def send(event, context, response_status, reason=None, response_data=None, physical_resource_id=None):",
                "    response_data = response_data or {}",
                "    response_body = json.dumps(",
                "        {",
                "            'Status': response_status,",
                "            'Reason': reason or 'See the details in CloudWatch Log Stream: ' + context.log_stream_name,",
                "            'PhysicalResourceId': physical_resource_id or context.log_stream_name,",
                "            'StackId': event['StackId'],",
                "            'RequestId': event['RequestId'],",
                "            'LogicalResourceId': event['LogicalResourceId'],",
                "           'Data': response_data",
                "        }",
                "    )",
                "",
                "    opener = build_opener(HTTPHandler)",
                "    request = Request(event['ResponseURL'], data=response_body)",
                "    request.add_header('Content-Type', '')",
                "    request.add_header('Content-Length', len(response_body))",
                "    request.get_method = lambda: 'PUT'",
                "    try:",
                "        response = opener.open(request)",
                "        print('Status code: {}'.format(response.getcode()))",
                "        print('Status message: {}'.format(response.msg))",
                "        return True",
                "    except HTTPError as exc:",
                "        print('Failed executing HTTP request: {}'.format(exc.code))",
                "        return False",
                "",
                 "session = botocore.session.get_session()",
                 "",
                 "def lambda_handler(event,context):",
                 "    print 'EVENT: ', event",
                 "    client = session.create_client('elasticache', region_name=event['ResourceProperties']['Region'])",
                 "    endpoint = client.describe_cache_clusters(",
                 "        CacheClusterId=event['ResourceProperties']['RedisCluster'],",
                 "        ShowCacheNodeInfo=True",
                 "    )['CacheClusters'][0]['CacheNodes'][0]['Endpoint']['Address']",
                 "    print 'ENDPOINT: ', endpoint",
                 "    send(event, context, SUCCESS, None, {'Endpoint': endpoint})"
              ]
            ]
          }
        },
        "Description": "Lambda function to get ElastiCache Endpoint",
        "MemorySize": 128,
        "Handler": "index.lambda_handler",
        "Role": {
          "Fn::GetAtt": [
            "GetECEndpointLambdaExecutionRole",
            "Arn"
          ]
        },
        "Timeout": "60",
        "Runtime": "python2.7"
      }
    },
    "GetECEndpointCustomeResource": {
      "Type": "Custom::GetECEndpoint",
      "DeletionPolicy" : "Retain",
      "Version": "1.0",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "GetECEndpointLambda",
            "Arn"
          ]
        },
        "Region": {
          "Ref": "AWS::Region" 
        },
        "RedisCluster": {
          "Ref": "ElasticacheCluster"
        }
      }
    }
  }
}
